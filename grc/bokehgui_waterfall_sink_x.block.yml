# auto-generated by grc.converter

id: bokehgui_waterfall_sink_x
label: Bokeh GUI Waterfall Sink
category: '[Bokeh GUI]/Bokeh GUI Sinks'

parameters:
-   id: type
    label: Type
    dtype: enum
    default: complex
    options: [complex, float, msg_complex, msg_float]
    option_labels: [Complex, Float, Complex Message, Float Message]
    option_attributes:
        fcn: [waterfall_sink_c_proc, waterfall_sink_f_proc, waterfall_sink_c_proc,
            waterfall_sink_f_proc]
        plot: [waterfall_sink_c, waterfall_sink_f, waterfall_sink_c, waterfall_sink_f]
        t: [complex, float, message, message]
    hide: part
-   id: name
    label: Name
    dtype: string
    default: '""'
    hide: ${ ('none' if len(name) > 0 else 'part') }
-   id: fftsize
    label: FFT Size
    dtype: int
    default: '1024'
    hide: ${ ('all' if type.t == 'message' else 'none') }
-   id: wintype
    label: Window Type
    dtype: int
    default: firdes.WIN_BLACKMAN_hARRIS
    options: [firdes.WIN_BLACKMAN_hARRIS, firdes.WIN_HAMMING, firdes.WIN_HANN, firdes.WIN_BLACKMAN,
        firdes.WIN_RECTANGULAR, firdes.WIN_KAISER, firdes.WIN_FLATTOP]
    option_labels: [Blackman-harris, Hamming, Hann, Blackman, Rectangular, Kaiser,
        Flat-top]
    hide: part
-   id: fc
    label: Center Frequency (Hz)
    dtype: real
    default: '0'
-   id: bw
    label: Bandwidth (Hz)
    dtype: real
    default: samp_rate
-   id: int_min
    label: Intensity Min
    dtype: float
    default: '-140'
    hide: part
-   id: int_max
    label: Intensity Max
    dtype: float
    default: '10'
    hide: part
-   id: grid
    label: Grid
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
    hide: part
-   id: ylabel
    label: Y label
    dtype: string
    default: Time
    hide: part
-   id: yunit
    label: Y units
    dtype: string
    hide: part
-   id: xlabel
    label: X Axis Label
    dtype: string
    default: Frequency
    hide: part
-   id: xunit
    label: X Axis Unit
    dtype: string
    default: Hz
    hide: part
-   id: update_time
    label: Update Period
    dtype: real
    default: '100'
    hide: part
-   id: placement
    label: Placement
    dtype: int_vector
    hide: part
-   id: legend
    label: Legend
    category: Config
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
    hide: part
-   id: label
    label: Label
    category: Config
    dtype: string
    hide: part
-   id: color
    label: Line 1 Color
    category: Config
    dtype: enum
    options: [Inferno, Magma, Plasma, Viridis, Greys]
    hide: part

inputs:
-   domain: stream
    dtype: ${ type.t }
    multiplicity: ${ (0 if type.t == 'message' else 1) }
    optional: true

outputs:
-   domain: message
    id: freq
    optional: true
asserts:
- ${ len(placement) == 4 or len(placement) == 2 }
- ${ all([i >= 0 for i in placement]) }

templates:
    imports: import bokehgui
    make: |+
      bokehgui.${type.fcn}(${fftsize}, ${wintype}, ${fc},${bw}, ${name})

      legend_list = []
      for i in  range(1):
        if len(${label}) == 0:
          legend_list.append("Data {0}".format(i))
        else:
          legend_list.append(${label})
      self.${id}_plot = bokehgui.${type.plot}(self.plot_lst, self.${id}, update_time = ${update_time},
                    legend_list = legend_list, palette = '${color}',
                    values_range = [${int_min}, ${int_max}], is_message = \
        % if type.t == 'message':
         True\
        % else:
         False\
        % endif
        )

      % if (yunit == ''):
      self.${id}_plot.set_y_label(${ylabel})
      % else:
      self.${id}_plot.set_y_label(${ylabel} + '(' +${yunit}+')')
      % endif
      % if (xunit == ''):
      self.${id}_plot.set_x_label(${xlabel})
      % else:
      self.${id}_plot.set_x_label(${xlabel} + '(' +${xunit}+')')
      % endif
      self.${id}_plot.enable_grid(${grid})
      self.${id}_plot.enable_legend(${legend})
      self.${id}_plot.set_layout(*(${placement}))
    callbacks:
    - set_frequency_range(${fc}, ${bw})
    # - set_title(${which}, ${title})
    - set_color(${color})

file_format: 1
